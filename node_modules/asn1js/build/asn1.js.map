{"version":3,"sources":["../src/asn1.js"],"names":["fromBER","compareSchema","verifySchema","fromJSON","powers2","Uint8Array","digitsString","LocalBaseBlock","constructor","parameters","blockLength","error","warnings","valueBeforeDecode","slice","ArrayBuffer","blockName","toJSON","byteLength","LocalHexBlock","BaseClass","LocalHexBlockMixin","isHexOnly","valueHex","inputBuffer","inputOffset","inputLength","intBuffer","length","push","toBER","sizeOnly","object","ex","LocalIdentificationBlock","idBlock","tagClass","tagNumber","isConstructed","firstOctet","retBuf","retView","number","encodedBuf","encodedView","size","i","curView","tagClassMask","tagNumberMask","count","tagNumberBufferMaxLength","intTagNumberBuffer","tempBuffer","tempBufferView","set","LocalLengthBlock","isIndefiniteForm","lenBlock","longFormUsed","lengthBufferView","LocalValueBlock","TypeError","BaseBlock","valueBlockType","name","optional","primitiveSchema","valueBlock","resultOffset","idBlockBuf","valueBlockSizeBuf","lenBlockBuf","valueBlockBuf","indefBuf","indefView","LocalPrimitiveValueBlock","valueHexView","Primitive","LocalConstructedValueBlock","value","initialOffset","initialLength","checkLen","indefiniteLength","currentOffset","returnObject","LocalFromBER","offset","result","concat","EndOfContent","pop","valueBuf","Constructed","LocalEndOfContentValueBlock","paramaters","LocalBooleanValueBlock","view","utilDecodeTC","call","Boolean","Sequence","Set","Null","LocalOctetStringValueBlock","prototype","currentBlockName","OctetString","isEqual","octetString","JSON","stringify","LocalBitStringValueBlock","unusedBits","BitString","bitString","LocalIntegerValueBlock","valueDec","_value","_valueHex","_valueDec","fromDER","expectedLength","updatedValueHex","updatedView","toDER","toString","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","max","counter","power2","n","p","digits","newValue","viewSub","b","firstBit","bitNumber","currentByte","asn1View","flag","byteNumber","charAt","Integer","otherValue","convertToDER","integer","convertFromDER","Enumerated","LocalSidValueBlock","isFirstSid","tempValueHex","tempView","sidValue","LocalObjectIdentifierValueBlock","fromString","sidBlock","string","pos1","pos2","sid","indexOf","substr","plus","parsedSID","parseInt","isNaN","sidStr","sidArray","ObjectIdentifier","LocalUtf8StringValueBlock","Utf8String","fromBuffer","String","fromCharCode","apply","decodeURIComponent","escape","inputString","str","unescape","encodeURIComponent","strLen","charCodeAt","LocalBmpStringValueBlock","BmpString","copyBuffer","valueView","temp","Uint16Array","strLength","codeBuf","codeView","dif","j","LocalUniversalStringValueBlock","UniversalString","Uint32Array","LocalSimpleStringValueBlock","LocalSimpleStringBlock","NumericString","PrintableString","TeletexString","VideotexString","IA5String","GraphicString","VisibleString","GeneralString","CharacterString","UTCTime","year","month","day","hour","minute","fromDate","valueDate","toBuffer","buffer","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toDate","Date","UTC","parser","parserArray","exec","outputArray","Array","join","GeneralizedTime","millisecond","getUTCMilliseconds","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","Number","valueOf","Error","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","DATE","TimeOfDay","DateTime","Duration","TIME","Choice","Any","Repeated","local","RawData","data","incomingOffset","localChangeType","inputObject","newType","newObject","Object","newASN1Type","root","inputData","inputSchema","choiceResult","verified","_result","hasOwnProperty","encodedId","decodedOffset","schemaView","replace","admission","maxLength","_optional","arrayRoot","asn1","json"],"mappings":"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;AACC;AACA,SAAIiD,aAAanD,OAAb,CAAqBG,aAArB,KAAuC,IAAxC,IACDgD,aAAa5B,QAAb,CAAsB9B,MAAtB,GAA+B,CADjC,EAEA;AACC0D,mBAAa3E,KAAb,GAAqB,gCAArB;AACA,aAAO;AACN6E,eAAS,CAAC,CADJ;AAENC,eAAQH;AAFF,OAAP;AAIA;AACD;;AAEAuM,mBAAclM,YAAd;;AAEA;AACD;AACA;AACA,SAAK,CAAL;AACCkM,mBAAcxL,OAAd;AACA;AACD;AACA;AACA,SAAK,CAAL;AACCwL,mBAAcnI,OAAd;AACA;AACD;AACA;AACA,SAAK,CAAL;AACCmI,mBAAc1K,SAAd;AACA;AACD;AACA;AACA,SAAK,CAAL;AACC0K,mBAAcjL,WAAd;AACA;AACD;AACA;AACA,SAAK,CAAL;AACCiL,mBAAcrL,IAAd;AACA;AACD;AACA;AACA,SAAK,CAAL;AACCqL,mBAAczG,gBAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCyG,mBAAc9H,UAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACC8H,mBAAcvG,UAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCuG,mBAAcb,IAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACC1L,kBAAa3E,KAAb,GAAqB,8CAArB;AACA,YAAO;AACN6E,cAAS,CAAC,CADJ;AAENC,cAAQH;AAFF,MAAP;AAID;AACA;AACA,SAAK,EAAL;AACCuM,mBAAcvL,QAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCuL,mBAActL,GAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCsL,mBAAc1E,aAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACC0E,mBAAczE,eAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCyE,mBAAcxE,aAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCwE,mBAAcvE,cAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCuE,mBAActE,SAAd;AACA;AACD;AACA;AACA,SAAK,EAAL;AACCsE,mBAAcjE,OAAd;AACA;AACD;AACA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","file":"asn1.js","sourcesContent":["/* eslint-disable indent */\r\n/*\r\n * Copyright (c) 2016-2018, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors\r\n *    may be used to endorse or promote products derived from this software without\r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n * OF SUCH DAMAGE.\r\n *\r\n */\r\n//**************************************************************************************\r\nimport { getParametersValue, padNumber, isEqualBuffer, bufferToHexCodes, checkBufferParams, utilToBase, utilFromBase, utilEncodeTC, utilDecodeTC, utilConcatBuf, utilConcatView } from \"pvutils\";\r\n//**************************************************************************************\r\n//region Declaration of global variables\r\n//**************************************************************************************\r\nconst powers2 = [new Uint8Array([1])];\r\nconst digitsString = \"0123456789\";\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration for \"LocalBaseBlock\" class\r\n//**************************************************************************************\r\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @typedef LocalBaseBlock\r\n * @interface\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n */\r\nclass LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueBeforeDecode]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {number} blockLength\r\n\t\t */\r\n\t\tthis.blockLength = getParametersValue(parameters, \"blockLength\", 0);\r\n\t\t/**\r\n\t\t * @type {string} error\r\n\t\t */\r\n\t\tthis.error = getParametersValue(parameters, \"error\", \"\");\r\n\t\t/**\r\n\t\t * @type {Array.<string>} warnings\r\n\t\t */\r\n\t\tthis.warnings = getParametersValue(parameters, \"warnings\", []);\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer} valueBeforeDecode\r\n\t\t */\r\n\t\tif(\"valueBeforeDecode\" in parameters)\r\n\t\t\tthis.valueBeforeDecode = parameters.valueBeforeDecode.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueBeforeDecode = new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"baseBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tblockName: this.constructor.blockName(),\r\n\t\t\tblockLength: this.blockLength,\r\n\t\t\terror: this.error,\r\n\t\t\twarnings: this.warnings,\r\n\t\t\tvalueBeforeDecode: bufferToHexCodes(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Description for \"LocalHexBlock\" class\r\n//**************************************************************************************\r\n/**\r\n * Class used as a base block for all remaining ASN.1 classes\r\n * @extends LocalBaseBlock\r\n * @typedef LocalHexBlock\r\n * @property {number} blockLength\r\n * @property {string} error\r\n * @property {Array.<string>} warnings\r\n * @property {ArrayBuffer} valueBeforeDecode\r\n * @property {boolean} isHexOnly\r\n * @property {ArrayBuffer} valueHex\r\n */\r\n//noinspection JSUnusedLocalSymbols\r\nconst LocalHexBlock = BaseClass => class LocalHexBlockMixin extends BaseClass\r\n{\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Constructor for \"LocalHexBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t */\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueHex = new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"hexBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Copy input buffer to internal buffer\r\n\t\tthis.valueHex = inputBuffer.slice(inputOffset, inputOffset + inputLength);\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isHexOnly !== true)\r\n\t\t{\r\n\t\t\tthis.error = \"Flag \\\"isHexOnly\\\" is not set, abort\";\r\n\t\t\treturn new ArrayBuffer(0);\r\n\t\t}\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn new ArrayBuffer(this.valueHex.byteLength);\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n};\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of identification block class\r\n//**************************************************************************************\r\nclass LocalIdentificationBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [idBlock]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(\"idBlock\" in parameters)\r\n\t\t{\r\n\t\t\t//region Properties from hexBlock class\r\n\t\t\tthis.isHexOnly = getParametersValue(parameters.idBlock, \"isHexOnly\", false);\r\n\t\t\tthis.valueHex = getParametersValue(parameters.idBlock, \"valueHex\", new ArrayBuffer(0));\r\n\t\t\t//endregion\r\n\r\n\t\t\tthis.tagClass = getParametersValue(parameters.idBlock, \"tagClass\", (-1));\r\n\t\t\tthis.tagNumber = getParametersValue(parameters.idBlock, \"tagNumber\", (-1));\r\n\t\t\tthis.isConstructed = getParametersValue(parameters.idBlock, \"isConstructed\", false);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.tagClass = (-1);\r\n\t\t\tthis.tagNumber = (-1);\r\n\t\t\tthis.isConstructed = false;\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"identificationBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet firstOctet = 0;\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tswitch(this.tagClass)\r\n\t\t{\r\n\t\t\tcase 1:\r\n\t\t\t\tfirstOctet |= 0x00; // UNIVERSAL\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tfirstOctet |= 0x40; // APPLICATION\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tfirstOctet |= 0x80; // CONTEXT-SPECIFIC\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tfirstOctet |= 0xC0; // PRIVATE\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.error = \"Unknown tag class\";\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tif(this.isConstructed)\r\n\t\t\tfirstOctet |= 0x20;\r\n\r\n\t\tif((this.tagNumber < 31) && (!this.isHexOnly))\r\n\t\t{\r\n\t\t\tretBuf = new ArrayBuffer(1);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tif(!sizeOnly)\r\n\t\t\t{\r\n\t\t\t\tlet number = this.tagNumber;\r\n\t\t\t\tnumber &= 0x1F;\r\n\t\t\t\tfirstOctet |= number;\r\n\r\n\t\t\t\tretView[0] = firstOctet;\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tif(this.isHexOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedBuf = utilToBase(this.tagNumber, 7);\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tconst size = encodedBuf.byteLength;\r\n\r\n\t\t\tretBuf = new ArrayBuffer(size + 1);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\tretView[0] = (firstOctet | 0x1F);\r\n\r\n\t\t\tif(!sizeOnly)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (size - 1); i++)\r\n\t\t\t\t\tretView[i + 1] = encodedView[i] | 0x80;\r\n\r\n\t\t\t\tretView[size] = encodedView[size - 1];\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\r\n\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\tretView[0] = (firstOctet | 0x1F);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < (curView.length - 1); i++)\r\n\t\t\t\tretView[i + 1] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.valueHex.byteLength] = curView[curView.length - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Zero buffer length\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find tag class\r\n\t\tconst tagClassMask = intBuffer[0] & 0xC0;\r\n\r\n\t\tswitch(tagClassMask)\r\n\t\t{\r\n\t\t\tcase 0x00:\r\n\t\t\t\tthis.tagClass = (1); // UNIVERSAL\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x40:\r\n\t\t\t\tthis.tagClass = (2); // APPLICATION\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0x80:\r\n\t\t\t\tthis.tagClass = (3); // CONTEXT-SPECIFIC\r\n\t\t\t\tbreak;\r\n\t\t\tcase 0xC0:\r\n\t\t\t\tthis.tagClass = (4); // PRIVATE\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.error = \"Unknown tag class\";\r\n\t\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Find it's constructed or not\r\n\t\tthis.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n\t\t//endregion\r\n\r\n\t\t//region Find tag number\r\n\t\tthis.isHexOnly = false;\r\n\r\n\t\tconst tagNumberMask = intBuffer[0] & 0x1F;\r\n\r\n\t\t//region Simple case (tag number < 31)\r\n\t\tif(tagNumberMask !== 0x1F)\r\n\t\t{\r\n\t\t\tthis.tagNumber = (tagNumberMask);\r\n\t\t\tthis.blockLength = 1;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Tag number bigger or equal to 31\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet count = 1;\r\n\r\n\t\t\tthis.valueHex = new ArrayBuffer(255);\r\n\t\t\tlet tagNumberBufferMaxLength = 255;\r\n\t\t\tlet intTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\r\n\t\t\t//noinspection JSBitwiseOperatorUsage\r\n\t\t\twhile(intBuffer[count] & 0x80)\r\n\t\t\t{\r\n\t\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count >= intBuffer.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//region In case if tag number length is greater than 255 bytes (rare but possible case)\r\n\t\t\t\tif(count === tagNumberBufferMaxLength)\r\n\t\t\t\t{\r\n\t\t\t\t\ttagNumberBufferMaxLength += 255;\r\n\r\n\t\t\t\t\tconst tempBuffer = new ArrayBuffer(tagNumberBufferMaxLength);\r\n\t\t\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\r\n\r\n\t\t\t\t\tfor(let i = 0; i < intTagNumberBuffer.length; i++)\r\n\t\t\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\r\n\r\n\t\t\t\t\tthis.valueHex = new ArrayBuffer(tagNumberBufferMaxLength);\r\n\t\t\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\r\n\t\t\tthis.blockLength = (count + 1);\r\n\t\t\tintTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F; // Write last byte to buffer\r\n\r\n\t\t\t//region Cut buffer\r\n\t\t\tconst tempBuffer = new ArrayBuffer(count);\r\n\t\t\tconst tempBufferView = new Uint8Array(tempBuffer);\r\n\r\n\t\t\tfor(let i = 0; i < count; i++)\r\n\t\t\t\ttempBufferView[i] = intTagNumberBuffer[i];\r\n\r\n\t\t\tthis.valueHex = new ArrayBuffer(count);\r\n\t\t\tintTagNumberBuffer = new Uint8Array(this.valueHex);\r\n\t\t\tintTagNumberBuffer.set(tempBufferView);\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Try to convert long tag number to short form\r\n\t\t\tif(this.blockLength <= 9)\r\n\t\t\t\tthis.tagNumber = utilFromBase(intTagNumberBuffer, 7);\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.isHexOnly = true;\r\n\t\t\t\tthis.warnings.push(\"Tag too long, represented as hex-coded\");\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Check if constructed encoding was using for primitive type\r\n\t\tif(((this.tagClass === 1)) &&\r\n\t\t\t(this.isConstructed))\r\n\t\t{\r\n\t\t\tswitch(this.tagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 1:  // Boolean\r\n\t\t\t\tcase 2:  // REAL\r\n\t\t\t\tcase 5:  // Null\r\n\t\t\t\tcase 6:  // OBJECT IDENTIFIER\r\n\t\t\t\tcase 9:  // REAL\r\n\t\t\t\tcase 14: // Time\r\n\t\t\t\tcase 23:\r\n\t\t\t\tcase 24:\r\n\t\t\t\tcase 31:\r\n\t\t\t\tcase 32:\r\n\t\t\t\tcase 33:\r\n\t\t\t\tcase 34:\r\n\t\t\t\t\tthis.error = \"Constructed encoding used for primitive type\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName: string,\r\n\t *  tagClass: number,\r\n\t *  tagNumber: number,\r\n\t *  isConstructed: boolean,\r\n\t *  isHexOnly: boolean,\r\n\t *  valueHex: ArrayBuffer,\r\n\t *  blockLength: number,\r\n\t *  error: string, warnings: Array.<string>,\r\n\t *  valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.tagClass = this.tagClass;\r\n\t\tobject.tagNumber = this.tagNumber;\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of length block class\r\n//**************************************************************************************\r\nclass LocalLengthBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalLengthBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [lenBlock]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(\"lenBlock\" in parameters)\r\n\t\t{\r\n\t\t\tthis.isIndefiniteForm = getParametersValue(parameters.lenBlock, \"isIndefiniteForm\", false);\r\n\t\t\tthis.longFormUsed = getParametersValue(parameters.lenBlock, \"longFormUsed\", false);\r\n\t\t\tthis.length = getParametersValue(parameters.lenBlock, \"length\", 0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isIndefiniteForm = false;\r\n\t\t\tthis.longFormUsed = false;\r\n\t\t\tthis.length = 0;\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"lengthBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Zero buffer length\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif(intBuffer[0] === 0xFF)\r\n\t\t{\r\n\t\t\tthis.error = \"Length block 0xFF is reserved by standard\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check for length form type\r\n\t\tthis.isIndefiniteForm = intBuffer[0] === 0x80;\r\n\t\t//endregion\r\n\r\n\t\t//region Stop working in case of indefinite length form\r\n\t\tif(this.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tthis.blockLength = 1;\r\n\t\t\treturn (inputOffset + this.blockLength);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check is long form of length encoding using\r\n\t\tthis.longFormUsed = !!(intBuffer[0] & 0x80);\r\n\t\t//endregion\r\n\r\n\t\t//region Stop working in case of short form of length value\r\n\t\tif(this.longFormUsed === false)\r\n\t\t{\r\n\t\t\tthis.length = (intBuffer[0]);\r\n\t\t\tthis.blockLength = 1;\r\n\t\t\treturn (inputOffset + this.blockLength);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate length value in case of long form\r\n\t\tconst count = intBuffer[0] & 0x7F;\r\n\r\n\t\tif(count > 8) // Too big length value\r\n\t\t{\r\n\t\t\tthis.error = \"Too big integer\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif((count + 1) > intBuffer.length)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tconst lengthBufferView = new Uint8Array(count);\r\n\r\n\t\tfor(let i = 0; i < count; i++)\r\n\t\t\tlengthBufferView[i] = intBuffer[i + 1];\r\n\r\n\t\tif(lengthBufferView[count - 1] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long encoded length\");\r\n\r\n\t\tthis.length = utilFromBase(lengthBufferView, 8);\r\n\r\n\t\tif(this.longFormUsed && (this.length <= 127))\r\n\t\t\tthis.warnings.push(\"Unneccesary usage of long length form\");\r\n\r\n\t\tthis.blockLength = count + 1;\r\n\t\t//endregion\r\n\r\n\t\treturn (inputOffset + this.blockLength); // Return current offset in input buffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif(this.length > 127)\r\n\t\t\tthis.longFormUsed = true;\r\n\r\n\t\tif(this.isIndefiniteForm)\r\n\t\t{\r\n\t\t\tretBuf = new ArrayBuffer(1);\r\n\r\n\t\t\tif(sizeOnly === false)\r\n\t\t\t{\r\n\t\t\t\tretView = new Uint8Array(retBuf);\r\n\t\t\t\tretView[0] = 0x80;\r\n\t\t\t}\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tif(this.longFormUsed === true)\r\n\t\t{\r\n\t\t\tconst encodedBuf = utilToBase(this.length, 8);\r\n\r\n\t\t\tif(encodedBuf.byteLength > 127)\r\n\t\t\t{\r\n\t\t\t\tthis.error = \"Too big length\";\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n\r\n\t\t\tif(sizeOnly === true)\r\n\t\t\t\treturn retBuf;\r\n\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tretView[0] = encodedBuf.byteLength | 0x80;\r\n\r\n\t\t\tfor(let i = 0; i < encodedBuf.byteLength; i++)\r\n\t\t\t\tretView[i + 1] = encodedView[i];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(1);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tretView[0] = this.length;\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.blockName = this.constructor.blockName();\r\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\r\n\t\tobject.longFormUsed = this.longFormUsed;\r\n\t\tobject.length = this.length;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of value block class\r\n//**************************************************************************************\r\nclass LocalValueBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"valueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\r\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Throw an exception for a function which needs to be specified in extended classes\r\n\t\tthrow TypeError(\"User need to make a specific function in a class which extends \\\"LocalValueBlock\\\"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic ASN.1 block class\r\n//**************************************************************************************\r\nexport class BaseBlock extends LocalBaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BaseBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [primitiveSchema]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t * @param valueBlockType Type of value block\r\n\t */\r\n\tconstructor(parameters = {}, valueBlockType = LocalValueBlock)\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tif(\"name\" in parameters)\r\n\t\t\tthis.name = parameters.name;\r\n\t\tif(\"optional\" in parameters)\r\n\t\t\tthis.optional = parameters.optional;\r\n\t\tif(\"primitiveSchema\" in parameters)\r\n\t\t\tthis.primitiveSchema = parameters.primitiveSchema;\r\n\r\n\t\tthis.idBlock = new LocalIdentificationBlock(parameters);\r\n\t\tthis.lenBlock = new LocalLengthBlock(parameters);\r\n\t\tthis.valueBlock = new valueBlockType(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BaseBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf;\r\n\r\n\t\tconst idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n\t\tconst valueBlockSizeBuf = this.valueBlock.toBER(true);\r\n\r\n\t\tthis.lenBlock.length = valueBlockSizeBuf.byteLength;\r\n\t\tconst lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n\r\n\t\tretBuf = utilConcatBuf(idBlockBuf, lenBlockBuf);\r\n\r\n\t\tlet valueBlockBuf;\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t\tvalueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n\t\telse\r\n\t\t\tvalueBlockBuf = new ArrayBuffer(this.lenBlock.length);\r\n\r\n\t\tretBuf = utilConcatBuf(retBuf, valueBlockBuf);\r\n\r\n\t\tif(this.lenBlock.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tconst indefBuf = new ArrayBuffer(2);\r\n\r\n\t\t\tif(sizeOnly === false)\r\n\t\t\t{\r\n\t\t\t\tconst indefView = new Uint8Array(indefBuf);\r\n\r\n\t\t\t\tindefView[0] = 0x00;\r\n\t\t\t\tindefView[1] = 0x00;\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, indefBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.idBlock = this.idBlock.toJSON();\r\n\t\tobject.lenBlock = this.lenBlock.toJSON();\r\n\t\tobject.valueBlock = this.valueBlock.toJSON();\r\n\r\n\t\tif(\"name\" in this)\r\n\t\t\tobject.name = this.name;\r\n\t\tif(\"optional\" in this)\r\n\t\t\tobject.optional = this.optional;\r\n\t\tif(\"primitiveSchema\" in this)\r\n\t\t\tobject.primitiveSchema = this.primitiveSchema.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic block for all PRIMITIVE types\r\n//**************************************************************************************\r\nclass LocalPrimitiveValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalPrimitiveValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueBeforeDecode]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\t//region Variables from \"hexBlock\" class\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t\tthis.valueHex = new ArrayBuffer(0);\r\n\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", true);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Copy input buffer into internal buffer\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\r\n\t\tconst valueHexView = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < intBuffer.length; i++)\r\n\t\t\tvalueHexView[i] = intBuffer[i];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PrimitiveValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Primitive extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Primitive\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalPrimitiveValueBlock);\r\n\r\n\t\tthis.idBlock.isConstructed = false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PRIMITIVE\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of basic block for all CONSTRUCTED types\r\n//**************************************************************************************\r\nclass LocalConstructedValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalConstructedValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\r\n\t\tthis.isIndefiniteForm = getParametersValue(parameters, \"isIndefiniteForm\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Store initial offset and length\r\n\t\tconst initialOffset = inputOffset;\r\n\t\tconst initialLength = inputLength;\r\n\t\t//endregion\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\t//region Initial checks\r\n\t\tif(intBuffer.length === 0)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Zero buffer length\");\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Aux function\r\n\t\tfunction checkLen(indefiniteLength, length)\r\n\t\t{\r\n\t\t\tif(indefiniteLength === true)\r\n\t\t\t\treturn 1;\r\n\r\n\t\t\treturn length;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tlet currentOffset = inputOffset;\r\n\r\n\t\twhile(checkLen(this.isIndefiniteForm, inputLength) > 0)\r\n\t\t{\r\n\t\t\tconst returnObject = LocalFromBER(inputBuffer, currentOffset, inputLength);\r\n\t\t\tif(returnObject.offset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.error = returnObject.result.error;\r\n\t\t\t\tthis.warnings.concat(returnObject.result.warnings);\r\n\t\t\t\treturn (-1);\r\n\t\t\t}\r\n\r\n\t\t\tcurrentOffset = returnObject.offset;\r\n\r\n\t\t\tthis.blockLength += returnObject.result.blockLength;\r\n\t\t\tinputLength -= returnObject.result.blockLength;\r\n\r\n\t\t\tthis.value.push(returnObject.result);\r\n\r\n\t\t\tif((this.isIndefiniteForm === true) && (returnObject.result.constructor.blockName() === EndOfContent.blockName()))\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif(this.isIndefiniteForm === true)\r\n\t\t{\r\n\t\t\tif(this.value[this.value.length - 1].constructor.blockName() === EndOfContent.blockName())\r\n\t\t\t\tthis.value.pop();\r\n\t\t\telse\r\n\t\t\t\tthis.warnings.push(\"No EndOfContent block encoded\");\r\n\t\t}\r\n\r\n\t\t//region Copy \"inputBuffer\" to \"valueBeforeDecode\"\r\n\t\tthis.valueBeforeDecode = inputBuffer.slice(initialOffset, initialOffset + initialLength);\r\n\t\t//endregion\r\n\r\n\t\treturn currentOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ConstructedValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.isIndefiniteForm = this.isIndefiniteForm;\r\n\t\tobject.value = [];\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.value.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Constructed extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Constructed\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalConstructedValueBlock);\r\n\r\n\t\tthis.idBlock.isConstructed = true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"CONSTRUCTED\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 EndOfContent type class\r\n//**************************************************************************************\r\nclass LocalEndOfContentValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalEndOfContentValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number}\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region There is no \"value block\" for EndOfContent type and we need to return the same offset\r\n\t\treturn inputOffset;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn new ArrayBuffer(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"EndOfContentValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class EndOfContent extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\tconstructor(paramaters = {})\r\n\t{\r\n\t\tsuper(paramaters, LocalEndOfContentValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 0; // EndOfContent\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"EndOfContent\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Boolean type class\r\n//**************************************************************************************\r\nclass LocalBooleanValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBooleanValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t\t\r\n\t\tthis.value = getParametersValue(parameters, \"value\", false);\r\n\t\tthis.isHexOnly = getParametersValue(parameters, \"isHexOnly\", false);\r\n\t\t\r\n\t\tif(\"valueHex\" in parameters)\r\n\t\t\tthis.valueHex = parameters.valueHex.slice(0);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.valueHex = new ArrayBuffer(1);\r\n\t\t\tif(this.value === true)\r\n\t\t\t{\r\n\t\t\t\tconst view = new Uint8Array(this.valueHex);\r\n\t\t\t\tview[0] = 0xFF;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\t//region Getting Uint8Array from ArrayBuffer\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t\t//endregion\r\n\r\n\t\tif(inputLength > 1)\r\n\t\t\tthis.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n\r\n\t\tthis.isHexOnly = true;\r\n\r\n\t\t//region Copy input buffer to internal array\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length);\r\n\t\tconst view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < intBuffer.length; i++)\r\n\t\t\tview[i] = intBuffer[i];\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(utilDecodeTC.call(this) !== 0 )\r\n\t\t\tthis.value = true;\r\n\t\telse\r\n\t\t\tthis.value = false;\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.valueHex;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BooleanValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Boolean extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Boolean\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBooleanValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 1; // Boolean\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Boolean\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Sequence and Set type classes\r\n//**************************************************************************************\r\nexport class Sequence extends Constructed\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Sequence\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 16; // Sequence\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Sequence\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Set extends Constructed\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Set\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 17; // Set\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Set\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Null type class\r\n//**************************************************************************************\r\nexport class Null extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Null\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBaseBlock); // We will not have a call to \"Null value block\" because of specified \"fromBER\" and \"toBER\" functions\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 5; // Null\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Null\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedLocalSymbols\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif(this.lenBlock.length > 0)\r\n\t\t\tthis.warnings.push(\"Non-zero length of value block for Null type\");\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\t\t\r\n\t\tthis.blockLength += inputLength;\r\n\t\t\r\n\t\tif((inputOffset + inputLength) > inputBuffer.byteLength)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\t\t\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tconst retBuf = new ArrayBuffer(2);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tconst retView = new Uint8Array(retBuf);\r\n\t\tretView[0] = 0x05;\r\n\t\tretView[1] = 0x00;\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 OctetString type class\r\n//**************************************************************************************\r\nclass LocalOctetStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalOctetStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = 0;\r\n\r\n\t\tif(this.isConstructed === true)\r\n\t\t{\r\n\t\t\tthis.isHexOnly = false;\r\n\r\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t\treturn resultOffset;\r\n\r\n\t\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\r\n\r\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.isIndefiniteForm === true)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n\t\t\t\t\t\treturn (-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(currentBlockName !== OctetString.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\r\n\t\t\tresultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\t\tthis.blockLength = inputLength;\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isConstructed === true)\r\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\r\n\r\n\t\tlet retBuf = new ArrayBuffer(this.valueHex.byteLength);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tif(this.valueHex.byteLength === 0)\r\n\t\t\treturn retBuf;\r\n\r\n\t\tretBuf = this.valueHex.slice(0);\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"OctetStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class OctetString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"OctetString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalOctetStringValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 4; // OctetString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\t//region Ability to encode empty OCTET STRING\r\n\t\tif(inputLength === 0)\r\n\t\t{\r\n\t\t\tif(this.idBlock.error.length === 0)\r\n\t\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\t\treturn inputOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"OctetString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Checking that two OCTETSTRINGs are equal\r\n\t * @param {OctetString} octetString\r\n\t */\r\n\tisEqual(octetString)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((octetString instanceof OctetString) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Compare two JSON strings\r\n\t\tif(JSON.stringify(this) !== JSON.stringify(octetString))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 BitString type class\r\n//**************************************************************************************\r\nclass LocalBitStringValueBlock extends LocalHexBlock(LocalConstructedValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBitStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.unusedBits = getParametersValue(parameters, \"unusedBits\", 0);\r\n\t\tthis.isConstructed = getParametersValue(parameters, \"isConstructed\", false);\r\n\t\tthis.blockLength = this.valueHex.byteLength;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Ability to decode zero-length BitString value\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\t\t//endregion\r\n\r\n\t\tlet resultOffset = (-1);\r\n\r\n\t\t//region If the BISTRING supposed to be a constructed value\r\n\t\tif(this.isConstructed === true)\r\n\t\t{\r\n\t\t\tresultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t\treturn resultOffset;\r\n\r\n\t\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst currentBlockName = this.value[i].constructor.blockName();\r\n\r\n\t\t\t\tif(currentBlockName === EndOfContent.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.isIndefiniteForm === true)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n\t\t\t\t\t\treturn (-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(currentBlockName !== BitString.blockName())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif((this.unusedBits > 0) && (this.value[i].valueBlock.unusedBits > 0))\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"Usign of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.unusedBits = this.value[i].valueBlock.unusedBits;\r\n\t\t\t\tif(this.unusedBits > 7)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\r\n\t\t\t\t\treturn (-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region If the BitString supposed to be a primitive value\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.unusedBits = intBuffer[0];\r\n\t\t\r\n\t\tif(this.unusedBits > 7)\r\n\t\t{\r\n\t\t\tthis.error = \"Unused bits for BitString must be in range 0-7\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\t//region Copy input buffer to internal buffer\r\n\t\tthis.valueHex = new ArrayBuffer(intBuffer.length - 1);\r\n\t\tconst view = new Uint8Array(this.valueHex);\r\n\t\tfor(let i = 0; i < (inputLength - 1); i++)\r\n\t\t\tview[i] = intBuffer[i + 1];\r\n\t\t//endregion\r\n\r\n\t\tthis.blockLength = intBuffer.length;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tif(this.isConstructed === true)\r\n\t\t\treturn LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly);\r\n\r\n\t\tif(sizeOnly === true)\r\n\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength + 1));\r\n\r\n\t\tif(this.valueHex.byteLength === 0)\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\r\n\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\tconst retBuf = new ArrayBuffer(this.valueHex.byteLength + 1);\r\n\t\tconst retView = new Uint8Array(retBuf);\r\n\r\n\t\tretView[0] = this.unusedBits;\r\n\r\n\t\tfor(let i = 0; i < this.valueHex.byteLength; i++)\r\n\t\t\tretView[i + 1] = curView[i];\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BitStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {{blockName, blockLength, error, warnings, valueBeforeDecode}|{blockName: string, blockLength: number, error: string, warnings: Array.<string>, valueBeforeDecode: string}}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.unusedBits = this.unusedBits;\r\n\t\tobject.isConstructed = this.isConstructed;\r\n\t\tobject.isHexOnly = this.isHexOnly;\r\n\t\tobject.valueHex = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class BitString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BitString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBitStringValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 3; // BitString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BitString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\t//region Ability to encode empty BitString\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\t\t//endregion\r\n\r\n\t\tthis.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n\t\tthis.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n\r\n\t\treturn super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Checking that two BITSTRINGs are equal\r\n\t * @param {BitString} bitString\r\n\t */\r\n\tisEqual(bitString)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((bitString instanceof BitString) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Compare two JSON strings\r\n\t\tif(JSON.stringify(this) !== JSON.stringify(bitString))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Integer type class\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalValueBlock\r\n */\r\nclass LocalIntegerValueBlock extends LocalHexBlock(LocalValueBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalIntegerValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.valueDec = parameters.value;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"valueHex\"\r\n\t * @param {ArrayBuffer} _value\r\n\t */\r\n\tset valueHex(_value)\r\n\t{\r\n\t\tthis._valueHex = _value.slice(0);\r\n\r\n\t\tif(_value.byteLength >= 4)\r\n\t\t{\r\n\t\t\tthis.warnings.push(\"Too big Integer for decoding, hex only\");\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis._valueDec = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = false;\r\n\r\n\t\t\tif(_value.byteLength > 0)\r\n\t\t\t\tthis._valueDec = utilDecodeTC.call(this);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueHex\"\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\tget valueHex()\r\n\t{\r\n\t\treturn this._valueHex;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueDec\"\r\n\t * @param {number} _value\r\n\t */\r\n\tset valueDec(_value)\r\n\t{\r\n\t\tthis._valueDec = _value;\r\n\r\n\t\tthis.isHexOnly = false;\r\n\t\tthis._valueHex = utilEncodeTC(_value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"valueDec\"\r\n\t * @returns {number}\r\n\t */\r\n\tget valueDec()\r\n\t{\r\n\t\treturn this._valueDec;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from DER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 DER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 DER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @param {number} [expectedLength=0] Expected length of converted \"valueHex\" buffer\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0)\r\n\t{\r\n\t\tconst offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\tif(offset === (-1))\r\n\t\t\treturn offset;\r\n\r\n\t\tconst view = new Uint8Array(this._valueHex);\r\n\r\n\t\tif((view[0] === 0x00) && ((view[1] & 0x80) !== 0))\r\n\t\t{\r\n\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\r\n\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\r\n\r\n\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(expectedLength !== 0)\r\n\t\t\t{\r\n\t\t\t\tif(this._valueHex.byteLength < expectedLength)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((expectedLength - this._valueHex.byteLength) > 1)\r\n\t\t\t\t\t\texpectedLength = this._valueHex.byteLength + 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(expectedLength);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView.set(view, expectedLength - this._valueHex.byteLength);\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn offset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (DER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoDER(sizeOnly = false)\r\n\t{\r\n\t\tconst view = new Uint8Array(this._valueHex);\r\n\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase ((view[0] & 0x80) !== 0):\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength + 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView[0] = 0x00;\r\n\t\t\t\t\tupdatedView.set(view, 1);\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n\t\t\t\t{\r\n\t\t\t\t\tconst updatedValueHex = new ArrayBuffer(this._valueHex.byteLength - 1);\r\n\t\t\t\t\tconst updatedView = new Uint8Array(updatedValueHex);\r\n\r\n\t\t\t\t\tupdatedView.set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1));\r\n\r\n\t\t\t\t\tthis._valueHex = updatedValueHex.slice(0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn this.toBER(sizeOnly);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\tif(resultOffset === (-1))\r\n\t\t\treturn resultOffset;\r\n\r\n\t\tthis.blockLength = inputLength;\r\n\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\treturn this.valueHex.slice(0);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"IntegerValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current value to decimal string representation\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\t//region Aux functions\r\n\t\tfunction viewAdd(first, second)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst c = new Uint8Array([0]);\r\n\t\t\t\r\n\t\t\tlet firstView = new Uint8Array(first);\r\n\t\t\tlet secondView = new Uint8Array(second);\r\n\t\t\t\r\n\t\t\tlet firstViewCopy = firstView.slice(0);\r\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\r\n\t\t\tlet secondViewCopy = secondView.slice(0);\r\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\r\n\t\t\t\r\n\t\t\tlet value = 0;\r\n\t\t\t\r\n\t\t\tconst max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\r\n\t\t\t\r\n\t\t\tlet counter = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = max; i >= 0; i--, counter++)\r\n\t\t\t{\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (counter < secondViewCopy.length):\r\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] + c[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tc[0] = value / 10;\r\n\t\t\t\t\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (counter >= firstViewCopy.length):\r\n\t\t\t\t\t\tfirstViewCopy = utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value % 10;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(c[0] > 0)\r\n\t\t\t\tfirstViewCopy = utilConcatView(c, firstViewCopy);\r\n\t\t\t\r\n\t\t\treturn firstViewCopy.slice(0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction power2(n)\r\n\t\t{\r\n\t\t\tif(n >= powers2.length)\r\n\t\t\t{\r\n\t\t\t\tfor(let p = powers2.length; p <= n; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst c = new Uint8Array([0]);\r\n\t\t\t\t\tlet digits = (powers2[p - 1]).slice(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let i = (digits.length - 1); i >=0; i--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\r\n\t\t\t\t\t\tc[0] = newValue[0] / 10;\r\n\t\t\t\t\t\tdigits[i] = newValue[0] % 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (c[0] > 0)\r\n\t\t\t\t\t\tdigits = utilConcatView(c, digits);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpowers2.push(digits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn powers2[n];\r\n\t\t}\r\n\t\t\r\n\t\tfunction viewSub(first, second)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet b = 0;\r\n\t\t\t\r\n\t\t\tlet firstView = new Uint8Array(first);\r\n\t\t\tlet secondView = new Uint8Array(second);\r\n\t\t\t\r\n\t\t\tlet firstViewCopy = firstView.slice(0);\r\n\t\t\tconst firstViewCopyLength = firstViewCopy.length - 1;\r\n\t\t\tlet secondViewCopy = secondView.slice(0);\r\n\t\t\tconst secondViewCopyLength = secondViewCopy.length - 1;\r\n\t\t\t\r\n\t\t\tlet value;\r\n\t\t\t\r\n\t\t\tlet counter = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = secondViewCopyLength; i >= 0; i--, counter++)\r\n\t\t\t{\r\n\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\r\n\t\t\t\t\r\n\t\t\t\tswitch(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase (value < 0):\r\n\t\t\t\t\t\tb = 1;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tb = 0;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(b > 0)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvalue = firstViewCopy[firstViewCopyLength - counter] - b;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(value < 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tb = 1;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tb = 0;\r\n\t\t\t\t\t\tfirstViewCopy[firstViewCopyLength - counter] = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn firstViewCopy.slice();\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst firstBit = (this._valueHex.byteLength * 8) - 1;\r\n\t\t\r\n\t\tlet digits = new Uint8Array((this._valueHex.byteLength * 8) / 3);\r\n\t\tlet bitNumber = 0;\r\n\t\tlet currentByte;\r\n\t\t\r\n\t\tconst asn1View = new Uint8Array(this._valueHex);\r\n\t\t\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tlet flag = false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Calculate number\r\n\t\tfor(let byteNumber = (this._valueHex.byteLength - 1); byteNumber >= 0; byteNumber--)\r\n\t\t{\r\n\t\t\tcurrentByte = asn1View[byteNumber];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < 8; i++)\r\n\t\t\t{\r\n\t\t\t\tif((currentByte & 1) === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(bitNumber)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase firstBit:\r\n\t\t\t\t\t\t\tdigits = viewSub(power2(bitNumber), digits);\r\n\t\t\t\t\t\t\tresult = \"-\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tdigits = viewAdd(digits, power2(bitNumber));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbitNumber++;\r\n\t\t\t\tcurrentByte >>= 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Print number\r\n\t\tfor(let i = 0; i < digits.length; i++)\r\n\t\t{\r\n\t\t\tif(digits[i])\r\n\t\t\t\tflag = true;\r\n\t\t\t\r\n\t\t\tif(flag)\r\n\t\t\t\tresult += digitsString.charAt(digits[i]);\r\n\t\t}\r\n\t\t\r\n\t\tif(flag === false)\r\n\t\t\tresult += digitsString.charAt(0);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class Integer extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Integer\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalIntegerValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 2; // Integer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Integer\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Compare two Integer object, or Integer and ArrayBuffer objects\r\n\t * @param {!Integer|ArrayBuffer} otherValue\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(otherValue)\r\n\t{\r\n\t\tif(otherValue instanceof Integer)\r\n\t\t{\r\n\t\t\tif(this.valueBlock.isHexOnly && otherValue.valueBlock.isHexOnly) // Compare two ArrayBuffers\r\n\t\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue.valueBlock.valueHex);\r\n\r\n\t\t\tif(this.valueBlock.isHexOnly === otherValue.valueBlock.isHexOnly)\r\n\t\t\t\treturn (this.valueBlock.valueDec === otherValue.valueBlock.valueDec);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif(otherValue instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBlock.valueHex, otherValue);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current Integer value from BER into DER format\r\n\t * @returns {Integer}\r\n\t */\r\n\tconvertToDER()\r\n\t{\r\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\r\n\t\tinteger.valueBlock.toDER();\r\n\r\n\t\treturn integer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current Integer value from DER to BER format\r\n\t * @returns {Integer}\r\n\t */\r\n\tconvertFromDER()\r\n\t{\r\n\t\tconst expectedLength = (this.valueBlock.valueHex.byteLength % 2) ? (this.valueBlock.valueHex.byteLength + 1) : this.valueBlock.valueHex.byteLength;\r\n\t\tconst integer = new Integer({ valueHex: this.valueBlock.valueHex });\r\n\t\tinteger.valueBlock.fromDER(integer.valueBlock.valueHex, 0, integer.valueBlock.valueHex.byteLength, expectedLength);\r\n\t\t\r\n\t\treturn integer;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 Enumerated type class\r\n//**************************************************************************************\r\nexport class Enumerated extends Integer\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Enumerated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 10; // Enumerated\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Enumerated\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of ASN.1 ObjectIdentifier type class\r\n//**************************************************************************************\r\nclass LocalSidValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSidValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {number} [valueDec]\r\n\t * @property {boolean} [isFirstSid]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.valueDec = getParametersValue(parameters, \"valueDec\", -1);\r\n\t\tthis.isFirstSid = getParametersValue(parameters, \"isFirstSid\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"sidBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tif(inputLength === 0)\r\n\t\t\treturn inputOffset;\r\n\r\n\t\t//region Basic check for parameters\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tif(checkBufferParams(this, inputBuffer, inputOffset, inputLength) === false)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\r\n\t\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\r\n\t\tthis.valueHex = new ArrayBuffer(inputLength);\r\n\t\tlet view = new Uint8Array(this.valueHex);\r\n\r\n\t\tfor(let i = 0; i < inputLength; i++)\r\n\t\t{\r\n\t\t\tview[i] = intBuffer[i] & 0x7F;\r\n\r\n\t\t\tthis.blockLength++;\r\n\r\n\t\t\tif((intBuffer[i] & 0x80) === 0x00)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t//region Ajust size of valueHex buffer\r\n\t\tconst tempValueHex = new ArrayBuffer(this.blockLength);\r\n\t\tconst tempView = new Uint8Array(tempValueHex);\r\n\r\n\t\tfor(let i = 0; i < this.blockLength; i++)\r\n\t\t\ttempView[i] = view[i];\r\n\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tthis.valueHex = tempValueHex.slice(0);\r\n\t\tview = new Uint8Array(this.valueHex);\r\n\t\t//endregion\r\n\r\n\t\tif((intBuffer[this.blockLength - 1] & 0x80) !== 0x00)\r\n\t\t{\r\n\t\t\tthis.error = \"End of input reached before message was fully decoded\";\r\n\t\t\treturn (-1);\r\n\t\t}\r\n\r\n\t\tif(view[0] === 0x00)\r\n\t\t\tthis.warnings.push(\"Needlessly long format of SID encoding\");\r\n\r\n\t\tif(this.blockLength <= 8)\r\n\t\t\tthis.valueDec = utilFromBase(view, 7);\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.isHexOnly = true;\r\n\t\t\tthis.warnings.push(\"Too big SID for decoding, hex only\");\r\n\t\t}\r\n\r\n\t\treturn (inputOffset + this.blockLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet retBuf;\r\n\t\tlet retView;\r\n\t\t//endregion\r\n\r\n\t\tif(this.isHexOnly)\r\n\t\t{\r\n\t\t\tif(sizeOnly === true)\r\n\t\t\t\treturn (new ArrayBuffer(this.valueHex.byteLength));\r\n\r\n\t\t\tconst curView = new Uint8Array(this.valueHex);\r\n\r\n\t\t\tretBuf = new ArrayBuffer(this.blockLength);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor(let i = 0; i < (this.blockLength - 1); i++)\r\n\t\t\t\tretView[i] = curView[i] | 0x80;\r\n\r\n\t\t\tretView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n\r\n\t\t\treturn retBuf;\r\n\t\t}\r\n\r\n\t\tconst encodedBuf = utilToBase(this.valueDec, 7);\r\n\t\tif(encodedBuf.byteLength === 0)\r\n\t\t{\r\n\t\t\tthis.error = \"Error during encoding SID value\";\r\n\t\t\treturn (new ArrayBuffer(0));\r\n\t\t}\r\n\r\n\t\tretBuf = new ArrayBuffer(encodedBuf.byteLength);\r\n\r\n\t\tif(sizeOnly === false)\r\n\t\t{\r\n\t\t\tconst encodedView = new Uint8Array(encodedBuf);\r\n\t\t\tretView = new Uint8Array(retBuf);\r\n\r\n\t\t\tfor(let i = 0; i < (encodedBuf.byteLength - 1); i++)\r\n\t\t\t\tretView[i] = encodedView[i] | 0x80;\r\n\r\n\t\t\tretView[encodedBuf.byteLength - 1] = encodedView[encodedBuf.byteLength - 1];\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create string representation of current SID block\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\r\n\t\tif(this.isHexOnly === true)\r\n\t\t\tresult = bufferToHexCodes(this.valueHex, 0, this.valueHex.byteLength);\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.isFirstSid)\r\n\t\t\t{\r\n\t\t\t\tlet sidValue = this.valueDec;\r\n\r\n\t\t\t\tif(this.valueDec <= 39)\r\n\t\t\t\t\tresult = \"0.\";\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.valueDec <= 79)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = \"1.\";\r\n\t\t\t\t\t\tsidValue -= 40;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = \"2.\";\r\n\t\t\t\t\t\tsidValue -= 80;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult += sidValue.toString();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult = this.valueDec.toString();\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.valueDec = this.valueDec;\r\n\t\tobject.isFirstSid = this.isFirstSid;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalObjectIdentifierValueBlock extends LocalValueBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalObjectIdentifierValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.fromString(getParametersValue(parameters, \"value\", \"\"));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tlet resultOffset = inputOffset;\r\n\r\n\t\twhile(inputLength > 0)\r\n\t\t{\r\n\t\t\tconst sidBlock = new LocalSidValueBlock();\r\n\t\t\tresultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n\t\t\tif(resultOffset === (-1))\r\n\t\t\t{\r\n\t\t\t\tthis.blockLength = 0;\r\n\t\t\t\tthis.error = sidBlock.error;\r\n\t\t\t\treturn resultOffset;\r\n\t\t\t}\r\n\r\n\t\t\tif(this.value.length === 0)\r\n\t\t\t\tsidBlock.isFirstSid = true;\r\n\r\n\t\t\tthis.blockLength += sidBlock.blockLength;\r\n\t\t\tinputLength -= sidBlock.blockLength;\r\n\r\n\t\t\tthis.value.push(sidBlock);\r\n\t\t}\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\tlet retBuf = new ArrayBuffer(0);\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tconst valueBuf = this.value[i].toBER(sizeOnly);\r\n\t\t\tif(valueBuf.byteLength === 0)\r\n\t\t\t{\r\n\t\t\t\tthis.error = this.value[i].error;\r\n\t\t\t\treturn (new ArrayBuffer(0));\r\n\t\t\t}\r\n\r\n\t\t\tretBuf = utilConcatBuf(retBuf, valueBuf);\r\n\t\t}\r\n\r\n\t\treturn retBuf;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create \"LocalObjectIdentifierValueBlock\" class from string\r\n\t * @param {string} string Input string to convert from\r\n\t * @returns {boolean}\r\n\t */\r\n\tfromString(string)\r\n\t{\r\n\t\tthis.value = []; // Clear existing SID values\r\n\r\n\t\tlet pos1 = 0;\r\n\t\tlet pos2 = 0;\r\n\r\n\t\tlet sid = \"\";\r\n\r\n\t\tlet flag = false;\r\n\r\n\t\tdo\r\n\t\t{\r\n\t\t\tpos2 = string.indexOf(\".\", pos1);\r\n\t\t\tif(pos2 === (-1))\r\n\t\t\t\tsid = string.substr(pos1);\r\n\t\t\telse\r\n\t\t\t\tsid = string.substr(pos1, pos2 - pos1);\r\n\r\n\t\t\tpos1 = pos2 + 1;\r\n\r\n\t\t\tif(flag)\r\n\t\t\t{\r\n\t\t\t\tconst sidBlock = this.value[0];\r\n\r\n\t\t\t\tlet plus = 0;\r\n\r\n\t\t\t\tswitch(sidBlock.valueDec)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tplus = 40;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tplus = 80;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis.value = []; // clear SID array\r\n\t\t\t\t\t\treturn false; // ???\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst parsedSID = parseInt(sid, 10);\r\n\t\t\t\tif(isNaN(parsedSID))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tsidBlock.valueDec = parsedSID + plus;\r\n\r\n\t\t\t\tflag = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst sidBlock = new LocalSidValueBlock();\r\n\t\t\t\tsidBlock.valueDec = parseInt(sid, 10);\r\n\t\t\t\tif(isNaN(sidBlock.valueDec))\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\tif(this.value.length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tsidBlock.isFirstSid = true;\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.value.push(sidBlock);\r\n\t\t\t}\r\n\t\t} while(pos2 !== (-1));\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Converts \"LocalObjectIdentifierValueBlock\" class to string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\tlet isHexOnly = false;\r\n\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t{\r\n\t\t\tisHexOnly = this.value[i].isHexOnly;\r\n\r\n\t\t\tlet sidStr = this.value[i].toString();\r\n\r\n\t\t\tif(i !== 0)\r\n\t\t\t\tresult = `${result}.`;\r\n\r\n\t\t\tif(isHexOnly)\r\n\t\t\t{\r\n\t\t\t\tsidStr = `{${sidStr}}`;\r\n\r\n\t\t\t\tif(this.value[i].isFirstSid)\r\n\t\t\t\t\tresult = `2.{${sidStr} - 80}`;\r\n\t\t\t\telse\r\n\t\t\t\t\tresult += sidStr;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tresult += sidStr;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ObjectIdentifierValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.toString();\r\n\t\tobject.sidArray = [];\r\n\t\tfor(let i = 0; i < this.value.length; i++)\r\n\t\t\tobject.sidArray.push(this.value[i].toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class ObjectIdentifier extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"ObjectIdentifier\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalObjectIdentifierValueBlock);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 6; // OBJECT IDENTIFIER\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"ObjectIdentifier\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of all string's classes\r\n//**************************************************************************************\r\nclass LocalUtf8StringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Constructor for \"LocalUtf8StringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\"; // String representation of decoded ArrayBuffer\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Utf8StringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class Utf8String extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Utf8String\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {ArrayBuffer} [valueHex]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalUtf8StringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 12; // Utf8String\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Utf8String\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//noinspection JSDeprecatedSymbols\r\n\t\t\tthis.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tthis.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//noinspection JSDeprecatedSymbols\r\n\t\tconst str = unescape(encodeURIComponent(inputString));\r\n\t\tconst strLen = str.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\r\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLen; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalBaseBlock\r\n * @extends LocalHexBlock\r\n */\r\nclass LocalBmpStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalBmpStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BmpStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class BmpString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BmpString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalBmpStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 30; // BmpString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"BmpString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tconst copyBuffer = inputBuffer.slice(0);\r\n\t\tconst valueView = new Uint8Array(copyBuffer);\r\n\r\n\t\tfor(let i = 0; i < valueView.length; i += 2)\r\n\t\t{\r\n\t\t\tconst temp = valueView[i];\r\n\r\n\t\t\tvalueView[i] = valueView[i + 1];\r\n\t\t\tvalueView[i + 1] = temp;\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(copyBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLength = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 2);\r\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLength; i++)\r\n\t\t{\r\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\r\n\t\t\tconst codeView = new Uint8Array(codeBuf);\r\n\t\t\tif(codeView.length > 2)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconst dif = 2 - codeView.length;\r\n\r\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\r\n\t\t\t\tvalueHexView[i * 2 + j + dif] = codeView[j];\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalUniversalStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalUniversalStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.isHexOnly = true;\r\n\t\tthis.value = \"\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UniversalStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nexport class UniversalString extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"UniversalString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalUniversalStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 28; // UniversalString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UniversalString\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tconst copyBuffer = inputBuffer.slice(0);\r\n\t\tconst valueView = new Uint8Array(copyBuffer);\r\n\r\n\t\tfor(let i = 0; i < valueView.length; i += 4)\r\n\t\t{\r\n\t\t\tvalueView[i] = valueView[i + 3];\r\n\t\t\tvalueView[i + 1] = valueView[i + 2];\r\n\t\t\tvalueView[i + 2] = 0x00;\r\n\t\t\tvalueView[i + 3] = 0x00;\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLength = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLength * 4);\r\n\t\tconst valueHexView = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLength; i++)\r\n\t\t{\r\n\t\t\tconst codeBuf = utilToBase(inputString.charCodeAt(i), 8);\r\n\t\t\tconst codeView = new Uint8Array(codeBuf);\r\n\t\t\tif(codeView.length > 4)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tconst dif = 4 - codeView.length;\r\n\r\n\t\t\tfor(let j = (codeView.length - 1); j >= 0; j--)\r\n\t\t\t\tvalueHexView[i * 4 + j + dif] = codeView[j];\r\n\t\t}\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nclass LocalSimpleStringValueBlock extends LocalHexBlock(LocalBaseBlock)\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSimpleStringValueBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.value = \"\";\r\n\t\tthis.isHexOnly = true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"SimpleStringValueBlock\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.value = this.value;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends BaseBlock\r\n */\r\nclass LocalSimpleStringBlock extends BaseBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"LocalSimpleStringBlock\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters, LocalSimpleStringValueBlock);\r\n\r\n\t\tif(\"value\" in parameters)\r\n\t\t\tthis.fromString(parameters.value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"SIMPLESTRING\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(inputBuffer));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\tconst strLen = inputString.length;\r\n\r\n\t\tthis.valueBlock.valueHex = new ArrayBuffer(strLen);\r\n\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\tfor(let i = 0; i < strLen; i++)\r\n\t\t\tview[i] = inputString.charCodeAt(i);\r\n\r\n\t\tthis.valueBlock.value = inputString;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class NumericString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"NumericString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 18; // NumericString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"NumericString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class PrintableString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"PrintableString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 19; // PrintableString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"PrintableString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class TeletexString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"TeletexString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 20; // TeletexString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TeletexString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class VideotexString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"VideotexString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 21; // VideotexString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"VideotexString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class IA5String extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"IA5String\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 22; // IA5String\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"IA5String\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class GraphicString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GraphicString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 25; // GraphicString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GraphicString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class VisibleString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"VisibleString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 26; // VisibleString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"VisibleString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class GeneralString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GeneralString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 27; // GeneralString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GeneralString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends LocalSimpleStringBlock\r\n */\r\nexport class CharacterString extends LocalSimpleStringBlock\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"CharacterString\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 29; // CharacterString\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"CharacterString\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of all date and time classes\r\n//**************************************************************************************\r\n/**\r\n * @extends VisibleString\r\n */\r\nexport class UTCTime extends VisibleString\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"UTCTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [value] String representatio of the date\r\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.year = 0;\r\n\t\tthis.month = 0;\r\n\t\tthis.day = 0;\r\n\t\tthis.hour = 0;\r\n\t\tthis.minute = 0;\r\n\t\tthis.second = 0;\r\n\r\n\t\t//region Create UTCTime from ASN.1 UTC string value\r\n\t\tif(\"value\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\r\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\r\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create GeneralizedTime from JavaScript Date type\r\n\t\tif(\"valueDate\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromDate(parameters.valueDate);\r\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 23; // UTCTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal string into ArrayBuffer\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBuffer()\r\n\t{\r\n\t\tconst str = this.toString();\r\n\r\n\t\tconst buffer = new ArrayBuffer(str.length);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\r\n\t\tfor(let i = 0; i < str.length; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\treturn buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting \"Date\" object into ASN.1 internal string\r\n\t * @param {!Date} inputDate JavaScript \"Date\" object\r\n\t */\r\n\tfromDate(inputDate)\r\n\t{\r\n\t\tthis.year = inputDate.getUTCFullYear();\r\n\t\tthis.month = inputDate.getUTCMonth() + 1;\r\n\t\tthis.day = inputDate.getUTCDate();\r\n\t\tthis.hour = inputDate.getUTCHours();\r\n\t\tthis.minute = inputDate.getUTCMinutes();\r\n\t\tthis.second = inputDate.getUTCSeconds();\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Function converting ASN.1 internal string into \"Date\" object\r\n\t * @returns {Date}\r\n\t */\r\n\ttoDate()\r\n\t{\r\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//region Parse input string\r\n\t\tconst parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n\t\tconst parserArray = parser.exec(inputString);\r\n\t\tif(parserArray === null)\r\n\t\t{\r\n\t\t\tthis.error = \"Wrong input string for convertion\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Store parsed values\r\n\t\tconst year = parseInt(parserArray[1], 10);\r\n\t\tif(year >= 50)\r\n\t\t\tthis.year = 1900 + year;\r\n\t\telse\r\n\t\t\tthis.year = 2000 + year;\r\n\r\n\t\tthis.month = parseInt(parserArray[2], 10);\r\n\t\tthis.day = parseInt(parserArray[3], 10);\r\n\t\tthis.hour = parseInt(parserArray[4], 10);\r\n\t\tthis.minute = parseInt(parserArray[5], 10);\r\n\t\tthis.second = parseInt(parserArray[6], 10);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal class into JavaScript string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst outputArray = new Array(7);\r\n\r\n\t\toutputArray[0] = padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n\t\toutputArray[1] = padNumber(this.month, 2);\r\n\t\toutputArray[2] = padNumber(this.day, 2);\r\n\t\toutputArray[3] = padNumber(this.hour, 2);\r\n\t\toutputArray[4] = padNumber(this.minute, 2);\r\n\t\toutputArray[5] = padNumber(this.second, 2);\r\n\t\toutputArray[6] = \"Z\";\r\n\r\n\t\treturn outputArray.join(\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"UTCTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.year = this.year;\r\n\t\tobject.month = this.month;\r\n\t\tobject.day = this.day;\r\n\t\tobject.hour = this.hour;\r\n\t\tobject.minute = this.minute;\r\n\t\tobject.second = this.second;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends VisibleString\r\n */\r\nexport class GeneralizedTime extends VisibleString\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"GeneralizedTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [value] String representatio of the date\r\n\t * @property {Date} [valueDate] JavaScript \"Date\" object\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.year = 0;\r\n\t\tthis.month = 0;\r\n\t\tthis.day = 0;\r\n\t\tthis.hour = 0;\r\n\t\tthis.minute = 0;\r\n\t\tthis.second = 0;\r\n\t\tthis.millisecond = 0;\r\n\r\n\t\t//region Create UTCTime from ASN.1 UTC string value\r\n\t\tif(\"value\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromString(parameters.value);\r\n\r\n\t\t\tthis.valueBlock.valueHex = new ArrayBuffer(parameters.value.length);\r\n\t\t\tconst view = new Uint8Array(this.valueBlock.valueHex);\r\n\r\n\t\t\tfor(let i = 0; i < parameters.value.length; i++)\r\n\t\t\t\tview[i] = parameters.value.charCodeAt(i);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create GeneralizedTime from JavaScript Date type\r\n\t\tif(\"valueDate\" in parameters)\r\n\t\t{\r\n\t\t\tthis.fromDate(parameters.valueDate);\r\n\t\t\tthis.valueBlock.valueHex = this.toBuffer();\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 24; // GeneralizedTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tconst resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm === true) ? inputLength : this.lenBlock.length);\r\n\t\tif(resultOffset === (-1))\r\n\t\t{\r\n\t\t\tthis.error = this.valueBlock.error;\r\n\t\t\treturn resultOffset;\r\n\t\t}\r\n\r\n\t\tthis.fromBuffer(this.valueBlock.valueHex);\r\n\r\n\t\tif(this.idBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.idBlock.blockLength;\r\n\r\n\t\tif(this.lenBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.lenBlock.blockLength;\r\n\r\n\t\tif(this.valueBlock.error.length === 0)\r\n\t\t\tthis.blockLength += this.valueBlock.blockLength;\r\n\r\n\t\treturn resultOffset;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ArrayBuffer into ASN.1 internal string\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t */\r\n\tfromBuffer(inputBuffer)\r\n\t{\r\n\t\tthis.fromString(String.fromCharCode.apply(null, new Uint8Array(inputBuffer)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal string into ArrayBuffer\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBuffer()\r\n\t{\r\n\t\tconst str = this.toString();\r\n\r\n\t\tconst buffer = new ArrayBuffer(str.length);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\r\n\t\tfor(let i = 0; i < str.length; i++)\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\r\n\t\treturn buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting \"Date\" object into ASN.1 internal string\r\n\t * @param {!Date} inputDate JavaScript \"Date\" object\r\n\t */\r\n\tfromDate(inputDate)\r\n\t{\r\n\t\tthis.year = inputDate.getUTCFullYear();\r\n\t\tthis.month = inputDate.getUTCMonth() + 1;\r\n\t\tthis.day = inputDate.getUTCDate();\r\n\t\tthis.hour = inputDate.getUTCHours();\r\n\t\tthis.minute = inputDate.getUTCMinutes();\r\n\t\tthis.second = inputDate.getUTCSeconds();\r\n\t\tthis.millisecond = inputDate.getUTCMilliseconds();\r\n\t}\r\n\t//**********************************************************************************\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Function converting ASN.1 internal string into \"Date\" object\r\n\t * @returns {Date}\r\n\t */\r\n\ttoDate()\r\n\t{\r\n\t\treturn (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting JavaScript string into ASN.1 internal class\r\n\t * @param {!string} inputString ASN.1 BER encoded array\r\n\t */\r\n\tfromString(inputString)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet isUTC = false;\r\n\r\n\t\tlet timeString = \"\";\r\n\t\tlet dateTimeString = \"\";\r\n\t\tlet fractionPart = 0;\r\n\r\n\t\tlet parser;\r\n\r\n\t\tlet hourDifference = 0;\r\n\t\tlet minuteDifference = 0;\r\n\t\t//endregion\r\n\r\n\t\t//region Convert as UTC time\r\n\t\tif(inputString[inputString.length - 1] === \"Z\")\r\n\t\t{\r\n\t\t\ttimeString = inputString.substr(0, inputString.length - 1);\r\n\r\n\t\t\tisUTC = true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Convert as local time\r\n\t\telse\r\n\t\t{\r\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\tconst number = new Number(inputString[inputString.length - 1]);\r\n\r\n\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\ttimeString = inputString;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Check that we do not have a \"+\" and \"-\" symbols inside UTC time\r\n\t\tif(isUTC)\r\n\t\t{\r\n\t\t\tif(timeString.indexOf(\"+\") !== (-1))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\tif(timeString.indexOf(\"-\") !== (-1))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Get \"UTC time difference\" in case of local time\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet multiplier = 1;\r\n\t\t\tlet differencePosition = timeString.indexOf(\"+\");\r\n\t\t\tlet differenceString = \"\";\r\n\r\n\t\t\tif(differencePosition === (-1))\r\n\t\t\t{\r\n\t\t\t\tdifferencePosition = timeString.indexOf(\"-\");\r\n\t\t\t\tmultiplier = (-1);\r\n\t\t\t}\r\n\r\n\t\t\tif(differencePosition !== (-1))\r\n\t\t\t{\r\n\t\t\t\tdifferenceString = timeString.substr(differencePosition + 1);\r\n\t\t\t\ttimeString = timeString.substr(0, differencePosition);\r\n\r\n\t\t\t\tif((differenceString.length !== 2) && (differenceString.length !== 4))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\t\tlet number = new Number(differenceString.substr(0, 2));\r\n\r\n\t\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\thourDifference = multiplier * number;\r\n\r\n\t\t\t\tif(differenceString.length === 4)\r\n\t\t\t\t{\r\n\t\t\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\t\t\tnumber = new Number(differenceString.substr(2, 2));\r\n\r\n\t\t\t\t\tif(isNaN(number.valueOf()))\r\n\t\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\t\t\tminuteDifference = multiplier * number;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get position of fraction point\r\n\t\tlet fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\r\n\t\tif(fractionPointPosition === (-1))\r\n\t\t\tfractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\r\n\t\t//endregion\r\n\r\n\t\t//region Get fraction part\r\n\t\tif(fractionPointPosition !== (-1))\r\n\t\t{\r\n\t\t\t//noinspection JSPrimitiveTypeWrapperUsage\r\n\t\t\tconst fractionPartCheck = new Number(`0${timeString.substr(fractionPointPosition)}`);\r\n\r\n\t\t\tif(isNaN(fractionPartCheck.valueOf()))\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\t\tfractionPart = fractionPartCheck.valueOf();\r\n\r\n\t\t\tdateTimeString = timeString.substr(0, fractionPointPosition);\r\n\t\t}\r\n\t\telse\r\n\t\t\tdateTimeString = timeString;\r\n\t\t//endregion\r\n\r\n\t\t//region Parse internal date\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (dateTimeString.length === 8): // \"YYYYMMDD\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 10): // \"YYYYMMDDHH\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\r\n\t\t\t\t\tthis.minute = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 60 * (fractionResult - this.minute);\r\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 12): // \"YYYYMMDDHHMM\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tlet fractionResult = 60 * fractionPart;\r\n\t\t\t\t\tthis.second = Math.floor(fractionResult);\r\n\r\n\t\t\t\t\tfractionResult = 1000 * (fractionResult - this.second);\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase (dateTimeString.length === 14): // \"YYYYMMDDHHMMSS\"\r\n\t\t\t\tparser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n\t\t\t\tif(fractionPointPosition !== (-1))\r\n\t\t\t\t{\r\n\t\t\t\t\tconst fractionResult = 1000 * fractionPart;\r\n\t\t\t\t\tthis.millisecond = Math.floor(fractionResult);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Put parsed values at right places\r\n\t\tconst parserArray = parser.exec(dateTimeString);\r\n\t\tif(parserArray === null)\r\n\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\r\n\t\tfor(let j = 1; j < parserArray.length; j++)\r\n\t\t{\r\n\t\t\tswitch(j)\r\n\t\t\t{\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.year = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.month = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tthis.day = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tthis.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tthis.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tthis.second = parseInt(parserArray[j], 10);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Wrong input string for convertion\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get final date\r\n\t\tif(isUTC === false)\r\n\t\t{\r\n\t\t\tconst tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n\r\n\t\t\tthis.year = tempDate.getUTCFullYear();\r\n\t\t\tthis.month = tempDate.getUTCMonth();\r\n\t\t\tthis.day = tempDate.getUTCDay();\r\n\t\t\tthis.hour = tempDate.getUTCHours();\r\n\t\t\tthis.minute = tempDate.getUTCMinutes();\r\n\t\t\tthis.second = tempDate.getUTCSeconds();\r\n\t\t\tthis.millisecond = tempDate.getUTCMilliseconds();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Function converting ASN.1 internal class into JavaScript string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(padNumber(this.year, 4));\r\n\t\toutputArray.push(padNumber(this.month, 2));\r\n\t\toutputArray.push(padNumber(this.day, 2));\r\n\t\toutputArray.push(padNumber(this.hour, 2));\r\n\t\toutputArray.push(padNumber(this.minute, 2));\r\n\t\toutputArray.push(padNumber(this.second, 2));\r\n\t\tif(this.millisecond !== 0)\r\n\t\t{\r\n\t\t\toutputArray.push(\".\");\r\n\t\t\toutputArray.push(padNumber(this.millisecond, 3));\r\n\t\t}\r\n\t\toutputArray.push(\"Z\");\r\n\r\n\t\treturn outputArray.join(\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"GeneralizedTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the block to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet object = {};\r\n\t\t\r\n\t\t//region Seems at the moment (Sep 2016) there is no way how to check method is supported in \"super\" object\r\n\t\ttry\r\n\t\t{\r\n\t\t\tobject = super.toJSON();\r\n\t\t}\r\n\t\tcatch(ex){}\r\n\t\t//endregion\r\n\r\n\t\tobject.year = this.year;\r\n\t\tobject.month = this.month;\r\n\t\tobject.day = this.day;\r\n\t\tobject.hour = this.hour;\r\n\t\tobject.minute = this.minute;\r\n\t\tobject.second = this.second;\r\n\t\tobject.millisecond = this.millisecond;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class DATE extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"DATE\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 31; // DATE\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"DATE\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class TimeOfDay extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"TimeOfDay\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 32; // TimeOfDay\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TimeOfDay\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class DateTime extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"DateTime\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 33; // DateTime\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"DateTime\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class Duration extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Duration\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 34; // Duration\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"Duration\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * @extends Utf8String\r\n */\r\nexport class TIME extends Utf8String\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Time\" class\r\n\t * @param {Object} [parameters={}]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\r\n\t\tthis.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\tthis.idBlock.tagNumber = 14; // Time\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function, need to get a block name. Need to have it here for inhiritence\r\n\t * @returns {string}\r\n\t */\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"TIME\";\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Choice\r\n//**************************************************************************************\r\nexport class Choice\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Choice\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Array} [value] Array of ASN.1 types for make a choice from\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.value = getParametersValue(parameters, \"value\", []);\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Any\r\n//**************************************************************************************\r\nexport class Any\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Any\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type Repeated\r\n//**************************************************************************************\r\nexport class Repeated\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Repeated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\tthis.optional = getParametersValue(parameters, \"optional\", false);\r\n\t\tthis.value = getParametersValue(parameters, \"value\", new Any());\r\n\t\tthis.local = getParametersValue(parameters, \"local\", false); // Could local or global array to store elements\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of special ASN.1 schema type RawData\r\n//**************************************************************************************\r\n/**\r\n * @description Special class providing ability to have \"toBER/fromBER\" for raw ArrayBuffer\r\n */\r\nexport class RawData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"Repeated\" class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {string} [name]\r\n\t * @property {boolean} [optional]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.data = getParametersValue(parameters, \"data\", new ArrayBuffer(0));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Base function for converting block from BER encoded array of bytes\r\n\t * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n\t * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n\t * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n\t * @returns {number} Offset after least decoded byte\r\n\t */\r\n\tfromBER(inputBuffer, inputOffset, inputLength)\r\n\t{\r\n\t\tthis.data = inputBuffer.slice(inputOffset, inputLength);\r\n\t\treturn (inputOffset + inputLength);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)\r\n\t * @param {boolean} [sizeOnly=false] Flag that we need only a size of encoding, not a real array of bytes\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\ttoBER(sizeOnly = false)\r\n\t{\r\n\t\treturn this.data;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major ASN.1 BER decoding function\r\n//**************************************************************************************\r\n/**\r\n * Internal library function for decoding ASN.1 BER\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array\r\n * @param {!number} inputOffset Offset in ASN.1 BER encoded array where decoding should be started\r\n * @param {!number} inputLength Maximum length of array of bytes which can be using in this function\r\n * @returns {{offset: number, result: Object}}\r\n */\r\nfunction LocalFromBER(inputBuffer, inputOffset, inputLength)\r\n{\r\n\tconst incomingOffset = inputOffset; // Need to store initial offset since \"inputOffset\" is changing in the function\r\n\r\n\t//region Local function changing a type for ASN.1 classes\r\n\tfunction localChangeType(inputObject, newType)\r\n\t{\r\n\t\tif(inputObject instanceof newType)\r\n\t\t\treturn inputObject;\r\n\r\n\t\tconst newObject = new newType();\r\n\t\tnewObject.idBlock = inputObject.idBlock;\r\n\t\tnewObject.lenBlock = inputObject.lenBlock;\r\n\t\tnewObject.warnings = inputObject.warnings;\r\n\t\t//noinspection JSCheckFunctionSignatures\r\n\t\tnewObject.valueBeforeDecode = inputObject.valueBeforeDecode.slice(0);\r\n\r\n\t\treturn newObject;\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Create a basic ASN.1 type since we need to return errors and warnings from the function\r\n\tlet returnObject = new BaseBlock({}, Object);\r\n\t//endregion\r\n\r\n\t//region Basic check for parameters\r\n\tif(checkBufferParams(new LocalBaseBlock(), inputBuffer, inputOffset, inputLength) === false)\r\n\t{\r\n\t\treturnObject.error = \"Wrong input parameters\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Getting Uint8Array from ArrayBuffer\r\n\tconst intBuffer = new Uint8Array(inputBuffer, inputOffset, inputLength);\r\n\t//endregion\r\n\r\n\t//region Initial checks\r\n\tif(intBuffer.length === 0)\r\n\t{\r\n\t\tthis.error = \"Zero buffer length\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Decode indentifcation block of ASN.1 BER structure\r\n\tlet resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n\treturnObject.warnings.concat(returnObject.idBlock.warnings);\r\n\tif(resultOffset === (-1))\r\n\t{\r\n\t\treturnObject.error = returnObject.idBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\r\n\tinputOffset = resultOffset;\r\n\tinputLength -= returnObject.idBlock.blockLength;\r\n\t//endregion\r\n\r\n\t//region Decode length block of ASN.1 BER structure\r\n\tresultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n\treturnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n\tif(resultOffset === (-1))\r\n\t{\r\n\t\treturnObject.error = returnObject.lenBlock.error;\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\r\n\tinputOffset = resultOffset;\r\n\tinputLength -= returnObject.lenBlock.blockLength;\r\n\t//endregion\r\n\r\n\t//region Check for usign indefinite length form in encoding for primitive types\r\n\tif((returnObject.idBlock.isConstructed === false) &&\r\n\t\t(returnObject.lenBlock.isIndefiniteForm === true))\r\n\t{\r\n\t\treturnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult: returnObject\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Switch ASN.1 block type\r\n\tlet newASN1Type = BaseBlock;\r\n\r\n\tswitch(returnObject.idBlock.tagClass)\r\n\t{\r\n\t\t//region UNIVERSAL\r\n\t\tcase 1:\r\n\t\t\t//region Check for reserved tag numbers\r\n\t\t\tif((returnObject.idBlock.tagNumber >= 37) &&\r\n\t\t\t\t(returnObject.idBlock.isHexOnly === false))\r\n\t\t\t{\r\n\t\t\t\treturnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n\t\t\t\treturn {\r\n\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\tresult: returnObject\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\tswitch(returnObject.idBlock.tagNumber)\r\n\t\t\t{\r\n\t\t\t\t//region EndOfContent type\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\t//region Check for EndOfContent type\r\n\t\t\t\t\tif((returnObject.idBlock.isConstructed === true) &&\r\n\t\t\t\t\t\t(returnObject.lenBlock.length > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\t\t\tresult: returnObject\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\tnewASN1Type = EndOfContent;\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Boolean type\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tnewASN1Type = Boolean;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Integer type\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tnewASN1Type = Integer;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region BitString type\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tnewASN1Type = BitString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region OctetString type\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tnewASN1Type = OctetString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Null type\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tnewASN1Type = Null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region OBJECT IDENTIFIER type\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tnewASN1Type = ObjectIdentifier;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Enumerated type\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tnewASN1Type = Enumerated;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Utf8String type\r\n\t\t\t\tcase 12:\r\n\t\t\t\t\tnewASN1Type = Utf8String;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Time type\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tnewASN1Type = TIME;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region ASN.1 reserved type\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\treturnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toffset: (-1),\r\n\t\t\t\t\t\tresult: returnObject\r\n\t\t\t\t\t};\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Sequence type\r\n\t\t\t\tcase 16:\r\n\t\t\t\t\tnewASN1Type = Sequence;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Set type\r\n\t\t\t\tcase 17:\r\n\t\t\t\t\tnewASN1Type = Set;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region NumericString type\r\n\t\t\t\tcase 18:\r\n\t\t\t\t\tnewASN1Type = NumericString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region PrintableString type\r\n\t\t\t\tcase 19:\r\n\t\t\t\t\tnewASN1Type = PrintableString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region TeletexString type\r\n\t\t\t\tcase 20:\r\n\t\t\t\t\tnewASN1Type = TeletexString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region VideotexString type\r\n\t\t\t\tcase 21:\r\n\t\t\t\t\tnewASN1Type = VideotexString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region IA5String type\r\n\t\t\t\tcase 22:\r\n\t\t\t\t\tnewASN1Type = IA5String;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region UTCTime type\r\n\t\t\t\tcase 23:\r\n\t\t\t\t\tnewASN1Type = UTCTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GeneralizedTime type\r\n\t\t\t\tcase 24:\r\n\t\t\t\t\tnewASN1Type = GeneralizedTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GraphicString type\r\n\t\t\t\tcase 25:\r\n\t\t\t\t\tnewASN1Type = GraphicString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region VisibleString type\r\n\t\t\t\tcase 26:\r\n\t\t\t\t\tnewASN1Type = VisibleString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region GeneralString type\r\n\t\t\t\tcase 27:\r\n\t\t\t\t\tnewASN1Type = GeneralString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region UniversalString type\r\n\t\t\t\tcase 28:\r\n\t\t\t\t\tnewASN1Type = UniversalString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region CharacterString type\r\n\t\t\t\tcase 29:\r\n\t\t\t\t\tnewASN1Type = CharacterString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region BmpString type\r\n\t\t\t\tcase 30:\r\n\t\t\t\t\tnewASN1Type = BmpString;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region DATE type\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tnewASN1Type = DATE;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region TimeOfDay type\r\n\t\t\t\tcase 32:\r\n\t\t\t\t\tnewASN1Type = TimeOfDay;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Date-Time type\r\n\t\t\t\tcase 33:\r\n\t\t\t\t\tnewASN1Type = DateTime;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region Duration type\r\n\t\t\t\tcase 34:\r\n\t\t\t\t\tnewASN1Type = Duration;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//endregion\r\n\t\t\t\t//region default\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet newObject;\r\n\r\n\t\t\t\t\t\tif(returnObject.idBlock.isConstructed === true)\r\n\t\t\t\t\t\t\tnewObject = new Constructed();\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tnewObject = new Primitive();\r\n\r\n\t\t\t\t\t\tnewObject.idBlock = returnObject.idBlock;\r\n\t\t\t\t\t\tnewObject.lenBlock = returnObject.lenBlock;\r\n\t\t\t\t\t\tnewObject.warnings = returnObject.warnings;\r\n\r\n\t\t\t\t\t\treturnObject = newObject;\r\n\r\n\t\t\t\t\t\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, inputLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t//endregion\r\n\t\t//region All other tag classes\r\n\t\tcase 2: // APPLICATION\r\n\t\tcase 3: // CONTEXT-SPECIFIC\r\n\t\tcase 4: // PRIVATE\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\tif(returnObject.idBlock.isConstructed === true)\r\n\t\t\t\t\tnewASN1Type = Constructed;\r\n\t\t\t\telse\r\n\t\t\t\t\tnewASN1Type = Primitive;\r\n\t\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Change type and perform BER decoding\r\n\treturnObject = localChangeType(returnObject, newASN1Type);\r\n\tresultOffset = returnObject.fromBER(inputBuffer, inputOffset, (returnObject.lenBlock.isIndefiniteForm === true) ? inputLength : returnObject.lenBlock.length);\r\n\t//endregion\r\n\r\n\t//region Coping incoming buffer for entire ASN.1 block\r\n\treturnObject.valueBeforeDecode = inputBuffer.slice(incomingOffset, incomingOffset + returnObject.blockLength);\r\n\t//endregion\r\n\r\n\treturn {\r\n\t\toffset: resultOffset,\r\n\t\tresult: returnObject\r\n\t};\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Major function for decoding ASN.1 BER array into internal library structuries\r\n * @param {!ArrayBuffer} inputBuffer ASN.1 BER encoded array of bytes\r\n */\r\nexport function fromBER(inputBuffer)\r\n{\r\n\tif(inputBuffer.byteLength === 0)\r\n\t{\r\n\t\tconst result = new BaseBlock({}, Object);\r\n\t\tresult.error = \"Input buffer has zero length\";\r\n\r\n\t\treturn {\r\n\t\t\toffset: (-1),\r\n\t\t\tresult\r\n\t\t};\r\n\t}\r\n\r\n\treturn LocalFromBER(inputBuffer, 0, inputBuffer.byteLength);\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major scheme verification function\r\n//**************************************************************************************\r\n/**\r\n * Compare of two ASN.1 object trees\r\n * @param {!Object} root Root of input ASN.1 object tree\r\n * @param {!Object} inputData Input ASN.1 object tree\r\n * @param {!Object} inputSchema Input ASN.1 schema to compare with\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\r\nexport function compareSchema(root, inputData, inputSchema)\r\n{\r\n\t//region Special case for Choice schema element type\r\n\tif(inputSchema instanceof Choice)\r\n\t{\r\n\t\tconst choiceResult = false;\r\n\r\n\t\tfor(let j = 0; j < inputSchema.value.length; j++)\r\n\t\t{\r\n\t\t\tconst result = compareSchema(root, inputData, inputSchema.value[j]);\r\n\t\t\tif(result.verified === true)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: true,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(choiceResult === false)\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: {\r\n\t\t\t\t\terror: \"Wrong values for Choice type\"\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t_result.name = inputSchema.name;\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Special case for Any schema element type\r\n\tif(inputSchema instanceof Any)\r\n\t{\r\n\t\t//region Add named component of ASN.1 schema\r\n\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\troot[inputSchema.name] = inputData;\r\n\t\t//endregion\r\n\r\n\t\treturn {\r\n\t\t\tverified: true,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Initial check\r\n\tif((root instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong root object\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((inputData instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 data\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((inputSchema instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((\"idBlock\" in inputSchema) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Comparing idBlock properties in ASN.1 data and ASN.1 schema\r\n\t//region Encode and decode ASN.1 schema idBlock\r\n\t/// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\r\n\tif((\"fromBER\" in inputSchema.idBlock) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif((\"toBER\" in inputSchema.idBlock) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tconst encodedId = inputSchema.idBlock.toBER(false);\r\n\tif(encodedId.byteLength === 0)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tconst decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n\tif(decodedOffset === (-1))\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region tagClass\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagClass\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region tagNumber\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"tagNumber\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region isConstructed\r\n\tif(inputSchema.idBlock.hasOwnProperty(\"isConstructed\") === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region isHexOnly\r\n\tif((\"isHexOnly\" in inputSchema.idBlock) === false) // Since 'isHexOnly' is an inhirited property\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t};\r\n\t}\r\n\r\n\tif(inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region valueHex\r\n\tif(inputSchema.idBlock.isHexOnly === true)\r\n\t{\r\n\t\tif((\"valueHex\" in inputSchema.idBlock) === false) // Since 'valueHex' is an inhirited property\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: { error: \"Wrong ASN.1 schema\" }\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst schemaView = new Uint8Array(inputSchema.idBlock.valueHex);\r\n\t\tconst asn1View = new Uint8Array(inputData.idBlock.valueHex);\r\n\r\n\t\tif(schemaView.length !== asn1View.length)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfor(let i = 0; i < schemaView.length; i++)\r\n\t\t{\r\n\t\t\tif(schemaView[i] !== asn1View[1])\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: false,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t//endregion\r\n\r\n\t//region Add named component of ASN.1 schema\r\n\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t{\r\n\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\tif(inputSchema.name !== \"\")\r\n\t\t\troot[inputSchema.name] = inputData;\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Getting next ASN.1 block for comparition\r\n\tif(inputSchema.idBlock.isConstructed === true)\r\n\t{\r\n\t\tlet admission = 0;\r\n\t\tlet result = { verified: false };\r\n\r\n\t\tlet maxLength = inputSchema.valueBlock.value.length;\r\n\r\n\t\tif(maxLength > 0)\r\n\t\t{\r\n\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\r\n\t\t\t\tmaxLength = inputData.valueBlock.value.length;\r\n\t\t}\r\n\r\n\t\t//region Special case when constructive value has no elements\r\n\t\tif(maxLength === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tverified: true,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Special case when \"inputData\" has no values and \"inputSchema\" has all optional values\r\n\t\tif((inputData.valueBlock.value.length === 0) &&\r\n\t\t\t(inputSchema.valueBlock.value.length !== 0))\r\n\t\t{\r\n\t\t\tlet _optional = true;\r\n\r\n\t\t\tfor(let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n\t\t\t\t_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n\r\n\t\t\tif(_optional === true)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tverified: true,\r\n\t\t\t\t\tresult: root\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\troot.error = \"Inconsistent object length\";\r\n\r\n\t\t\treturn {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tfor(let i = 0; i < maxLength; i++)\r\n\t\t{\r\n\t\t\t//region Special case when there is an \"optional\" element of ASN.1 schema at the end\r\n\t\t\tif((i - admission) >= inputData.valueBlock.value.length)\r\n\t\t\t{\r\n\t\t\t\tif(inputSchema.valueBlock.value[i].optional === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst _result = {\r\n\t\t\t\t\t\tverified: false,\r\n\t\t\t\t\t\tresult: root\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\troot.error = \"Inconsistent length between ASN.1 data and schema\";\r\n\r\n\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\treturn _result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//region Special case for Repeated type of ASN.1 schema element\r\n\t\t\t\tif(inputSchema.valueBlock.value[0] instanceof Repeated)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n\t\t\t\t\tif(result.verified === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[0].optional === true)\r\n\t\t\t\t\t\t\tadmission++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif((\"name\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet arrayRoot = {};\r\n\r\n\t\t\t\t\t\tif((\"local\" in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local === true))\r\n\t\t\t\t\t\t\tarrayRoot = inputData;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tarrayRoot = root;\r\n\r\n\t\t\t\t\t\tif(typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n\t\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n\r\n\t\t\t\t\t\tarrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n\t\t\t\t\tif(result.verified === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(inputSchema.valueBlock.value[i].optional === true)\r\n\t\t\t\t\t\t\tadmission++;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Delete early added name of block\r\n\t\t\t\t\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\t\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: root\r\n\t\t\t};\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tverified: true,\r\n\t\t\tresult: root\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region Ability to parse internal value for primitive-encoded value (value of OctetString, for example)\r\n\tif((\"primitiveSchema\" in inputSchema) &&\r\n\t\t(\"valueHex\" in inputData.valueBlock))\r\n\t{\r\n\t\t//region Decoding of raw ASN.1 data\r\n\t\tconst asn1 = fromBER(inputData.valueBlock.valueHex);\r\n\t\tif(asn1.offset === (-1))\r\n\t\t{\r\n\t\t\tconst _result = {\r\n\t\t\t\tverified: false,\r\n\t\t\t\tresult: asn1.result\r\n\t\t\t};\r\n\r\n\t\t\t//region Delete early added name of block\r\n\t\t\tif(inputSchema.hasOwnProperty(\"name\"))\r\n\t\t\t{\r\n\t\t\t\tinputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, \"\");\r\n\t\t\t\tif(inputSchema.name !== \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete root[inputSchema.name];\r\n\t\t\t\t\t_result.name = inputSchema.name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\r\n\t\t\treturn _result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n\t}\r\n\r\n\treturn {\r\n\t\tverified: true,\r\n\t\tresult: root\r\n\t};\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//noinspection JSUnusedGlobalSymbols\r\n/**\r\n * ASN.1 schema verification for ArrayBuffer data\r\n * @param {!ArrayBuffer} inputBuffer Input BER-encoded ASN.1 data\r\n * @param {!Object} inputSchema Input ASN.1 schema to verify against to\r\n * @return {{verified: boolean}|{verified:boolean, result: Object}}\r\n */\r\nexport function verifySchema(inputBuffer, inputSchema)\r\n{\r\n\t//region Initial check\r\n\tif((inputSchema instanceof Object) === false)\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: { error: \"Wrong ASN.1 schema type\" }\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Decoding of raw ASN.1 data\r\n\tconst asn1 = fromBER(inputBuffer);\r\n\tif(asn1.offset === (-1))\r\n\t{\r\n\t\treturn {\r\n\t\t\tverified: false,\r\n\t\t\tresult: asn1.result\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\r\n\t//region Compare ASN.1 struct with input schema\r\n\treturn compareSchema(asn1.result, asn1.result, inputSchema);\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Major function converting JSON to ASN.1 objects\r\n//**************************************************************************************\r\n//noinspection JSUnusedGlobalSymbols\r\n/**\r\n * Converting from JSON to ASN.1 objects\r\n * @param {string|Object} json JSON string or object to convert to ASN.1 objects\r\n */\r\nexport function fromJSON(json)\r\n{\r\n\t// TODO Implement\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************"]}